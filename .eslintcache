[{"/home/vebjorng/Documents/apps/currency-converter-react/src/index.js":"1","/home/vebjorng/Documents/apps/currency-converter-react/src/App.js":"2","/home/vebjorng/Documents/apps/currency-converter-react/src/components/ConvertCurrency.js":"3"},{"size":147,"mtime":1611411279267,"results":"4","hashOfConfig":"5"},{"size":228,"mtime":1611340153335,"results":"6","hashOfConfig":"5"},{"size":5100,"mtime":1611365288207,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"198fd95",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"/home/vebjorng/Documents/apps/currency-converter-react/src/index.js",[],"/home/vebjorng/Documents/apps/currency-converter-react/src/App.js",[],"/home/vebjorng/Documents/apps/currency-converter-react/src/components/ConvertCurrency.js",["16","17","18"],"import React, { useState, useEffect } from \"react\"\n\nfunction ConvertCurrency() {\n    const [currencies, setCurrencies] = useState([])\n    const [fromCurrency, setFromCurrency] = useState('NOK')\n    const [toCurrency, setToCurrency] = useState('USD')\n    const [amount, setAmount] = useState()\n    const [result, setResult] = useState(null)\n    const [message, setMessage] = useState('')\n    const [exchangeRate, setExchangeRate] = useState()\n\n\n    // Initialize the currencies and values\n    useEffect( async () => {\n        await fetch(`https://api.exchangeratesapi.io/latest?base=EUR`)\n            .then(res => res.json())\n            .then(data => {\n                setCurrencies(Object.keys(data.rates))         \n                console.log(currencies)\n            })\n            .catch(error => {console.log(\"Oops\", error.message)});\n    }, [])\n\n\n    // Handles the conversion event\n    const Convert = () => {\n        //fromCurrency !== toCurrency ? \n\n        fetch(`https://api.exchangeratesapi.io/latest?base=${fromCurrency}&symbols=${toCurrency}`)\n            .then(res => res.json())\n            .then(data => {\n                const result = amount * (data.rates[toCurrency])\n                setResult(result.toFixed(4))\n                setExchangeRate(data.rates[toCurrency].toFixed(3))\n            })\n            .catch(error => {console.log(\"Oops\", error.message)}) \n        \n                \n            //: setResult(\"The currencies are identical, choose ones that differ from one another.\")\n    }\n\n    // The states are updated by this function based on the currencies the user selects\n    const Select = (e) => {\n        switch(e.target.name) {\n            case \"from\":\n                setFromCurrency(e.target.value)\n                break;\n            case \"to\":\n                setToCurrency(e.target.value)\n                break;\n        }\n    }\n\n\n    // Switch currencies (and calculate new exchange rate?)\n    const Switch = () => {\n        if (toCurrency) {\n            setToCurrency(fromCurrency)\n            setFromCurrency(toCurrency)\n            Convert()\n            setMessage(`${toCurrency} ${amount} converts to ${fromCurrency} ${result}`) \n        } \n        //if (fromCurrency) {\n        //    setFromCurrency(toCurrency)\n        //}\n        \n\n        \n    }\n    \n    \n    return (\n        <div className=\"container\">\n            <div className=\"converter\">\n\n                <h3 className=\"header\">Currency Converter</h3>\n\n                <div className=\"form\">\n                    <label>Amount</label>\n                    <input \n                        name=\"amount\"\n                        className=\"amount-input\"\n                        placeholder=\"Amount\" \n                        value={amount}\n                        onChange={(e) => setAmount(e.target.value)}\n                    />\n                        <div className=\"select\">\n                            <select  \n                                name=\"from\"\n                                className=\"currency-selection\" \n                                onChange={(e) => Select(e)}\n                                value={fromCurrency}\n                            >\n                                    {currencies.map(currency => (\n                                        <option key={currency}>{currency}</option>\n                                    ))}\n                            </select>\n\n                            <button \n                                className=\"switch-button\"\n                                onClick={Switch}\n                            >\n                                <span className=\"arrows\">Switch</span>\n                            </button>\n                            \n                            <select \n                                className=\"currency-selection\" \n                                name=\"to\"\n                                onChange={(e) => Select(e)}\n                                value={toCurrency}\n                            >\n                                    {currencies.map(currency => (\n                                        <option key={currency}>{currency}</option>\n                                    ))}\n                            </select>\n                        </div>\n                        <label>Exchange rate</label>\n                        <input\n                            \n                            className=\"exchange-rate\"\n                            placeholder=\"Exchange rate\"\n                            value={exchangeRate} \n                        />\n                        <div className=\"btn\"\n                            onClick={() => {\n                                Convert()\n                                setMessage(`${fromCurrency} ${amount} converts to ${toCurrency} ${result}`)     \n                            }}\n                        >\n                                <span>Convert</span>\n                        </div>\n                    </div>\n\n                    <h3 className=\"message\">{message}</h3>\n\n                </div>\n        </div>\n    )\n}\n\nexport default ConvertCurrency",["19","20"],{"ruleId":"21","severity":1,"message":"22","line":14,"column":16,"nodeType":"23","endLine":22,"endColumn":6},{"ruleId":"21","severity":1,"message":"24","line":22,"column":8,"nodeType":"25","endLine":22,"endColumn":10,"suggestions":"26"},{"ruleId":"27","severity":1,"message":"28","line":44,"column":9,"nodeType":"29","messageId":"30","endLine":51,"endColumn":10},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'currencies'. Either include it or remove the dependency array.","ArrayExpression",["35"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-native-reassign",["36"],"no-negated-in-lhs",["37"],{"desc":"38","fix":"39"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [currencies]",{"range":"40","text":"41"},[846,848],"[currencies]"]